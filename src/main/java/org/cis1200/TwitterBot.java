package org.cis1200;

import java.util.ArrayList;
import java.util.List;
import java.util.Iterator;

public class TwitterBot {

    /** The MarkovChain you'll be using to generate tweets */
    private final MarkovChain mc;

    /**
     * @param trainingData - cleaned data from which to construct the TwitterBot
     *                     MarkovModel
     */
    public TwitterBot(List<List<String>> trainingData) {
        mc = new MarkovChain(trainingData);
    }

    /**
     * Generates a single, well-formatted tweet by following a random walk
     * through the MarkovModel. The path is given by the choices made by
     * {@code ng}.
     * <p>
     * A generated tweet consists of the sequence of tokens produced by
     * the random walk, with spaces added after every token that
     * is not itself followed by a punctuation token.
     * <p>
     * For example, a walk through the MarkovChain of the illustrative example
     * (see {@link MarkovChain}) might produce the following sequence of tokens:
     * 
     * <pre>
     *     "a" "banana" "!" "and" "a" "chair"
     * </pre>
     * 
     * They would be concatenated with spaces (except before the "!" and at the end)
     * to
     * produce the tweet: {@code "a banana! and a chair"}.
     * <p>
     * <b>NOTE:</b> The {@link StringBuilder} class provides a useful way to append
     * {@code String}s and the method {@link String#matches(String)} can be used
     * with
     * {@link TweetParser#PUNCTUATION_TOKEN} to determine whether a token is
     * punctuation.
     *
     * @param ng a source of numbers for walking through the TwitterBot's
     *           MarkovChain
     * @return the tweet generated by following that walk
     */
    public String generateTweet(NumberGenerator ng) {
        // TODO: Complete this method
        StringBuilder tweet = new StringBuilder();
        Iterator<String> walk = mc.getWalk(ng);
        String previous = null;
        while (walk.hasNext()) {
            String word = walk.next();
            if (previous != null && !word.matches(TweetParser.PUNCTUATION_TOKEN)) {
                tweet.append(" ");
            }
            tweet.append(word);
            previous = word;
        }
        return tweet.toString();
    }

    /**
     * Generates a random tweet. This function is implemented for you.
     * 
     * @return a randomly generated tweet
     */
    public String generateTweet() {
        return generateTweet(new RandomNumberGenerator());
    }

    /**
     * Generates a list containing a specified number of randomly generated tweets.
     *
     * This function is implemented for you.
     *
     * @param numTweets number of tweets to generate
     * @return a list of random tweets of length {@code numTweets}
     */
    public List<String> generateRandomTweets(int numTweets) {
        List<String> tweets = new ArrayList<>();
        while (numTweets > 0) {
            tweets.add(generateTweet());
            numTweets--;
        }
        return tweets;
    }

}
